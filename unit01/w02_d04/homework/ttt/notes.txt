
#INPUT_TO_INDEX
Once the user inputs where they would like to go on the board, we then have to convert this
to the board index multiple times. Instead of doing that in a lot of places, we can remove
this repetitive code and put it in this helper method. This method takes the user_input
(which is a string), converts it to an Integer, and subtracts 1. Remember that, from the player's
point of view, the board contains spaces 1-9. But, an array's indexes start their count at 0.

#MOVE
Your #move method must take in three arguments: 1) the board array, 2) the index in the
board array that the player would like to fill out with an "X" or and "O", and 3) the player's
character (either "X" or "O"). We previously had you write this method with a default argument
of "X" for the third argument, but that is no longer needed.

#TURN
Build a method #turn to encapsulate the logic of a single complete turn composed of the following
routine:
Asking the user for their move by position 1-9.
Receiving the user input.
Convert user input to an index
If the move is valid, make the move and display board.
Otherwise (that is, if the move is invalid) ask for a new position until a valid move is received.
All these procedures will be wrapped into our #turn method. However, the majority of the logic for these procedures will be defined and encapsulated in individual methods which you've already built.
You can imagine the pseudocode for the #turn method:
ask for input
get input
convert input to index
if move is valid
  make the move for index and show board
else
  ask for input again until you get a valid move
end

#TURN_COUNT
This method takes in an argument of the board array and returns the number of turns that have
been played.

#CURRENT_PLAYER
The #current_player method should take in an argument of the game board and use the #turn_count
method to determine if it is "X"'s turn or "O"'s.

#WON?
Your #won? method should accept a board as an argument and return false/nil if there is no win
combination present in the board and return the winning combination indexes as an array if there is a win. Use your WIN_COMBINATIONS constant in this method.

#FULL?
The #full? method should accept a board and return true if every element in the board contains either
an "X" or an "O".

#DRAW?
Build a method #draw? that accepts a board and returns true if the board has not been won and is full
and false if the board is not won and the board is not full, and false if the board is won.

#OVER?
Build a method #over? that accepts a board and returns true if the board has been won, is a draw,
or is full.

#WINNER
The #winner method should accept a board and return the token, "X" or "O" that has won the game
given a winning board.

PUTTING IT ALL TOGETHER: THE #PLAY METHOD
#PLAY
The play method is the main method of the tic tac toe application and is responsible for the game loop. A tic tac toe game must allow players to take turns, checking if the game is over after every turn, and at the conclusion of the game, whether because it was won or because it was a draw, reporting to the user the outcome of the game. You can imagine the pseudocode:
until the game is over
  take turns
end

if the game was won
  congratulate the winner
else if the game was a draw
  tell the players it has been a draw
end

*/



